{
	"info": {
		"_postman_id": "bookloop-api-collection",
		"name": "BookLoop API Testing",
		"description": "Colección de pruebas para la API de BookLoop",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Books",
			"item": [
				{
					"name": "GET - Obtener todos los libros",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has books array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('books');",
									"    pm.expect(jsonData.books).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "POST - Crear nuevo libro",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Libro de Prueba\",\n    \"author\": \"Autor de Prueba\",\n    \"description\": \"Descripción del libro de prueba\",\n    \"price\": 29.99,\n    \"category\": \"Ficción\",\n    \"condition\": \"Nuevo\",\n    \"sellerId\": \"{{userId}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has book data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('book');",
									"    pm.expect(jsonData.book).to.have.property('_id');",
									"    pm.expect(jsonData.book.title).to.eql('Libro de Prueba');",
									"});",
									"",
									"pm.test(\"Save book ID to environment\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('bookId', jsonData.book._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "GET - Obtener libro por ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Book has correct ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.book._id).to.eql(pm.environment.get('bookId'));",
									"});",
									"",
									"pm.test(\"Book has required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.book).to.have.property('title');",
									"    pm.expect(jsonData.book).to.have.property('author');",
									"    pm.expect(jsonData.book).to.have.property('price');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "PUT - Actualizar libro completo",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Libro Actualizado\",\n    \"author\": \"Autor Actualizado\",\n    \"description\": \"Descripción actualizada\",\n    \"price\": 39.99,\n    \"category\": \"No Ficción\",\n    \"condition\": \"Usado\",\n    \"sellerId\": \"{{userId}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Book title was updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.book.title).to.eql('Libro Actualizado');",
									"});",
									"",
									"pm.test(\"Book price was updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.book.price).to.eql(39.99);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "PATCH - Actualizar parcialmente libro",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"price\": 45.99,\n    \"condition\": \"Como Nuevo\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Price was updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.book.price).to.eql(45.99);",
									"});",
									"",
									"pm.test(\"Condition was updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.book.condition).to.eql('Como Nuevo');",
									"});",
									"",
									"pm.test(\"Title remains unchanged\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.book.title).to.eql('Libro Actualizado');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "DELETE - Eliminar libro",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('eliminado');",
									"});",
									"",
									"pm.test(\"Verify book was deleted\", function () {",
									"    // This test would typically make another GET request to verify deletion",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
} 